---
x-airflow-common:
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.0}
  environment: &id001
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: pyspark==3.3.2 boto3 python-dotenv
  volumes: &id002
  - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
  - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
  - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
  - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  - F:/Guvi/Final_project/Final_project:/opt/airflow/Final_project
  - F:\Guvi\Final_project\Final_project\faker_output:/opt/airflow/faker_output
  - F:/Guvi/Final_project/Final_project/batch:/opt/airflow/batch
  user: ${AIRFLOW_UID:-50000}:0
  depends_on: &id005
    redis: &id003
      condition: service_healthy
    postgres: &id004
      condition: service_healthy
services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
    - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test:
      - CMD
      - pg_isready
      - -U
      - airflow
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
  redis:
    image: redis:7.2-bookworm
    expose:
    - 6379
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.0}
    environment: *id001
    volumes: *id002
    user: ${AIRFLOW_UID:-50000}:0
    depends_on:
      redis: *id003
      postgres: *id004
      airflow-init:
        condition: service_completed_successfully
    command: webserver
    ports:
    - 8080:8080
    healthcheck:
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:8080/health
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.0}
    environment: *id001
    volumes: *id002
    user: ${AIRFLOW_UID:-50000}:0
    depends_on:
      redis: *id003
      postgres: *id004
      airflow-init:
        condition: service_completed_successfully
    command: scheduler
    healthcheck:
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:8974/health
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
  airflow-worker:
    build:
      context: .
      dockerfile: Dockerfile
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.0}
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
      DUMB_INIT_SETSID: '0'
    volumes: *id002
    user: ${AIRFLOW_UID:-50000}:0
    depends_on:
      redis: *id003
      postgres: *id004
      airflow-init:
        condition: service_completed_successfully
    command: celery worker
    healthcheck:
      test:
      - CMD-SHELL
      - celery --app airflow.providers.celery.executors.celery_executor.app inspect
        ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app
        inspect ping -d "celery@$${HOSTNAME}"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
  airflow-triggerer:
    build:
      context: .
      dockerfile: Dockerfile
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.0}
    environment: *id001
    volumes: *id002
    user: ${AIRFLOW_UID:-50000}:0
    depends_on:
      redis: *id003
      postgres: *id004
      airflow-init:
        condition: service_completed_successfully
    command: triggerer
    healthcheck:
      test:
      - CMD-SHELL
      - airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
  airflow-init:
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.0}
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ''
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    volumes:
    - ${AIRFLOW_PROJ_DIR:-.}:/sources
    user: 0:0
    depends_on: *id005
    entrypoint: /bin/bash
    command:
    - -c
    - "if [[ -z \"${AIRFLOW_UID}\" ]]; then\n  echo\n  echo -e \"\\033[1;33mWARNING!!!:\
      \ AIRFLOW_UID not set!\\e[0m\"\n  echo \"If you are on Linux, you SHOULD follow\
      \ the instructions below to set \"\n  echo \"AIRFLOW_UID environment variable,\
      \ otherwise files will be owned by root.\"\n  echo \"For other operating systems\
      \ you can get rid of the warning with manually created .env file:\"\n  echo\
      \ \"    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user\"\
      \n  echo\nfi\none_meg=1048576\nmem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf\
      \ PAGE_SIZE) / one_meg))\ncpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)\n\
      disk_available=$$(df / | tail -1 | awk '{print $$4}')\nwarning_resources=\"\
      false\"\nif (( mem_available < 4000 )) ; then\n  echo\n  echo -e \"\\033[1;33mWARNING!!!:\
      \ Not enough memory available for Docker.\\e[0m\"\n  echo \"At least 4GB of\
      \ memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))\"\
      \n  echo\n  warning_resources=\"true\"\nfi\nif (( cpus_available < 2 )); then\n\
      \  echo\n  echo -e \"\\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\\\
      e[0m\"\n  echo \"At least 2 CPUs recommended. You have $${cpus_available}\"\n\
      \  echo\n  warning_resources=\"true\"\nfi\nif (( disk_available < one_meg *\
      \ 10 )); then\n  echo\n  echo -e \"\\033[1;33mWARNING!!!: Not enough Disk space\
      \ available for Docker.\\e[0m\"\n  echo \"At least 10 GBs recommended. You have\
      \ $$(numfmt --to iec $$((disk_available * 1024 )))\"\n  echo\n  warning_resources=\"\
      true\"\nfi\nif [[ $${warning_resources} == \"true\" ]]; then\n  echo\n  echo\
      \ -e \"\\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see\
      \ above)!\\e[0m\"\n  echo \"Please follow the instructions to increase amount\
      \ of resources available:\"\n  echo \"   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin\"\
      \n  echo\nfi\nmkdir -p /sources/logs /sources/dags /sources/plugins\nchown -R\
      \ \"${AIRFLOW_UID}:0\" /sources/{logs,dags,plugins}\nexec /entrypoint airflow\
      \ version\n"
  airflow-cli:
    build:
      context: .
      dockerfile: Dockerfile
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.0}
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
      CONNECTION_CHECK_MAX_COUNT: '0'
    volumes: *id002
    user: ${AIRFLOW_UID:-50000}:0
    depends_on: *id005
    profiles:
    - debug
    command:
    - bash
    - -c
    - airflow
  flower:
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.0}
    environment: *id001
    volumes: *id002
    user: ${AIRFLOW_UID:-50000}:0
    depends_on:
      redis: *id003
      postgres: *id004
      airflow-init:
        condition: service_completed_successfully
    command: celery flower
    profiles:
      - flower
    ports:
      - 5555:5555
    healthcheck:
      test:
        - CMD
        - curl
        - --fail
        - http://localhost:5555/
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"
    restart: unless-stopped


volumes:
  postgres-db-volume:
  grafana_data:

  